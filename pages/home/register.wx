<template>
<!-- wxml -->
<view>
  <view>
    <ui-check-list max="1" label-position="left" options="{{ countryList }}" type="plain" value="{{ checklist5 }}" bindchange='typechange'/>
  </view>
  <view class="flex-wrp-row">
    <text class="textt">真实姓名：</text><input placeholder="请输入您的真实姓名" type="text" class='item-right flex-wrp-row'/>
  </view>
  <view class="flex-wrp-row">
    <text class="textt">真实姓名：</text><input placeholder="请输入您的真实姓名" type="text" class='item-right flex-wrp-row'/>
  </view>

  <view style="{{showt}}" id="t" bindtap="typechange">
    <!-- 教师模块 -->
    <view>
      <view class="flex-wrp-row">
        <text class="textt">电话：</text><input placeholder="请输入您的电话号码" type="text" class='item-right flex-wrp-row'/>
      </view>
      <view class="flex-wrp-row">
        <text class="textt">住址：</text><input placeholder="请输入您的住址" type="text" class='item-right flex-wrp-row'/>
      </view>
    </view>

      <view class="flex-wrp-row">
         <picker
          mode="multiSelector"
          bindchange="bindMultiPickerChange"
          bindcolumnchange="bindMultiPickerColumnChange"
          value="{{multiIndex}}"
          range="{{multiArray}}"
        >
          <view class="picker">
            当前选择：{{multiArray[0][multiIndex[0]]}}，{{multiArray[1][multiIndex[1]]}}
          </view>
        </picker>
        <view style="{{addbutton}}"><button bindtap="addclassx">增加</button></view>
      </view>

  </view>

  <view style="{{shows}}" id="s" bindtap="typechange">
    <!-- 学生模块 -->
    <text class="textt">家庭地址：</text><input placeholder="请输入您的真实姓名" type="text" class='item-right flex-wrp-row'/>
    <text class="textt">所在班级：</text><input placeholder="请输入您的真实姓名" type="text" class='item-right flex-wrp-row'/>
    <text class="textt">备注：</text><input placeholder="请输入您的真实姓名" type="text" class='item-right flex-wrp-row'/>


    <view class='showPicker' bindtap='showPicker'>MyPicker</view>
    <cover-view class='{{ showPicker ? ".shade-container" : "hide-container" }}' wx:if='{{ firstShow }}'>
      <cover-view class='left-shade' bindtap='hidePicker'></cover-view>
      <cover-view class='right-choose'>
        <cover-view class='button-container'>
          <cover-view class='cancal' bindtap='cancal'>取消</cover-view>
          <cover-view class='sure' bindtap='sure'>确定</cover-view>
        </cover-view>	
        <cover-view class='picker-container'>
          <cover-view
            class='picker-item {{ item.flag ? "picker-item-choose" : "" }}'
            wx:for='{{ chooseList }}'
            wx:key='index' wx:for-item='item'
            bindtap='chooseItem'
            data-value='{{ item.value }}'
          >
            {{ item.name }}
          </cover-view>
        </cover-view>
      </cover-view>
    </cover-view>


  </view>

  <view style="{{showp}}" id="p" bindtap="typechange">
    <!-- 家长模块 -->
    <text class="textt">电话：</text><input placeholder="请输入您的真实姓名" type="text" class='item-right flex-wrp-row'/>
    <text class="textt">家长类别(0:妈妈 1:爸爸)：</text><input placeholder="请输入您的真实姓名" type="text" class='item-right flex-wrp-row'/>
    <text class="textt">备注：</text><input placeholder="请输入您的真实姓名" type="text" class='item-right flex-wrp-row'/>
  </view>
</view>
</template>

<script>
//js
let list = [];
export default {
  config: {//json
    navigationBarTitleText: '注册'
  },
  properties: {
		chooseList: {
			type: Array
		},
		multiple: {
			type: Boolean
		}
	},methods: {
		// 点击picker元素事件	
		chooseItem(e) {
			if (this.properties.multiple) {
				// 多选事件
				let val = e.target.dataset.value;
				let arr = this.data.chooseList;
				let flag = '';
				let index = null;
				for (let i = 0, len = arr.length; i < len; i++) {
					if (arr[i].value == val) {
						index = i;
						flag = `chooseList[${i}].flag`
					}
				}
				if (!this.data.chooseList[index].flag) {
					this.setData({
						[flag]: true
					})
				} else {
					this.setData({
						[flag]: false
					})
				}
			} else {
				// 单选事件
				let val = e.target.dataset.value;
				let arr = this.data.chooseList;
				let flag = '';
				let index = null;
				for (let i = 0, len = arr.length; i < len; i++) {
					index = i;
					flag = `chooseList[${i}].flag`;
					if (arr[i].value == val) {
						this.setData({
							[flag]: true
						})
					} else {
						this.setData({
							[flag]: false
						})
					}
				}
			}
		},
		// 展示picker
		showPicker() {
			if (!this.data.firstShow) {
				this.setData({
					firstShow: true
				})
			}
			this.setData({
				showPicker: true,
			})
			// 加载时重新渲染已选择元素
			let arr = this.data.chooseList;
			let array = this.data.list;
			let flag = '';
			let index = null;
			for (let i = 0, len = arr.length; i < len; i++) {
				index = i;
				flag = `chooseList[${i}].flag`;
				if (!array.includes(arr[i].value)) {
					this.setData({
						[flag]: false
					})
				} else {
					this.setData({
						[flag]: true
					})
				}
			}
		},
		// 隐藏picker
		hidePicker() {
			this.setData({
				showPicker: false
			})
		},
		// 取消按钮事件
		cancal() {
			this.hidePicker();
		},
		// 确定按钮事件
		sure() {
			list = [];
			for (let item of this.data.chooseList) {
				if (item.flag) {
					list.push(item.value);
				}
			}
			this.setData({
				list
			})
			this.hidePicker();
			this.triggerEvent('chooseEvent', {
				chooseArray: this.data.list
			});
		}
	},
  data: {
    showPicker: false,
		firstShow: false,
		list: [],


    openid:null,
    showt:"display:none",
    shows:"",
    showp:"display:none",
    addbutton:"display:none",
    userType:3,//0:超级管理员 1:管理员 2:教师 3:学生 4:家长
    countryList: ['教师', '学生', '家长'],
    checklist5: ['学生'],
    multiArray: [['一年级', '二年级','三年级'], ['一班','二班','三班']],
    objectMultiArray: [
      [
        {
          id: 0,
          name: '一年级'
        },
        {
          id: 1,
          name: '二年级'
        },
        {
          id: 2,
          name: '三年级'
        }
      ], [
        {
          id: 0,
          name: '一班'
        },
        {
          id: 1,
          name: '二班'
        },
        {
          id: 2,
          name: '三班'
        }
      ]
    ],
    addclass:"",
    tempclass:"",
    addclsscn:"",
    multiIndex: [0, 0],
  },
  addclassx: function(e){
    var that = this;
    this.setData({
      addclass: that.data.addclass + that.data.tempclass + "~"
    });
    var i = 0;
    for(;i<that.data.addclass.split("~").length-1;i++){
      console.log(i)
      this.setData({
        addclsscn: that.data.addclsscn + that.data.addclass.split("~")[i].split(",")[0] + 1 + "年级" + that.data.addclass.split("~")[i].split(",")[1] + 1  + "班级"
      });
    }
    console.log(that.data.addclsscn);
  },
  bindMultiPickerChange: function (e) {
    console.log('picker发送选择改变，携带值为', e.detail.value)
    this.setData({
      multiIndex: e.detail.value,
      tempclass: e.detail.value,
      addbutton: ""
    })
  },
  bindMultiPickerColumnChange: function (e) {
    console.log('修改的列为', e.detail.column, '，值为', e.detail.value);
    var data = {
      multiArray: this.data.multiArray,
      multiIndex: this.data.multiIndex
    };
    data.multiIndex[e.detail.column] = e.detail.value;
    switch (e.detail.column) {
      case 0:
        switch (data.multiIndex[0]) {
          case 0:
            data.multiArray[1] = ['一班', '二班', '三班'];
            break;
          case 1:
            data.multiArray[1] = ['一班', '二班', '三班'];
            break;
          case 2:
            data.multiArray[1] = ['一班', '二班', '三班'];
            break;
        }
        data.multiIndex[1] = 0;
        data.multiIndex[2] = 0;
        break;

        }


    this.setData(data);
  },
  onLoad: function (res) {
    this.setData({
      openid:res.openid,
      show1:""
    })
  },
  typechange(e){
    if(e.type != "change")
      return
    if(e.detail.value[0] == '教师'){
      this.setData({
        userType:2,
        showt:"",
        shows:"display:none",
        showp:"display:none"
      })      
    }
    if(e.detail.value[0] == '学生'){
      this.setData({
        userType:3,
        showt:"display:none",
        shows:"",
        showp:"display:none"
      })
    }
    if(e.detail.value[0] == '家长'){
      this.setData({
        userType:4,
        showt:"display:none",
        shows:"display:none",
        showp:""
      })
    }
  }
}
</script>

<style lang="less">
//wxss
.row-flex{
  padding-top:8px;
  flex-direction: row;
}
.textt{
  padding-top:7px;
}
/* 水平显示 */
.flex-wrp-row {
  display: flex;
  flex-direction: row;
  padding-left:7%;
  padding-top:8px;
}
 
.item {
  padding: 20rpx;
  position: relative;
}
 
.item-left {
   flex: 1; /* 重要 */
   align-items:center;
}
 
.item-right {
  position: relative;
  align-items:center;
}

page {
    height: 100%;
    width: 100%;
}

.showPicker {
    width: 100%;
    height: 80rpx;
    line-height: 80rpx;
    font-size: 30rpx;
    background-color: paleturquoise;
    text-align: center;
}

.shade-container {
    position: fixed;
    height: 100%;
    width: 100%;
    top: 0;
    right: -200%;
    display: flex;
    justify-content: space-around;
    background-color: rgba(0, 0, 0, 0.5);
    transform: translateX(-200%);
    transition: all 0.5s ease;
    z-index: 9999;
}

.hide-container {
    position: fixed;
    height: 100%;
    width: 100%;
    top: 0;
    right: -200%;
    z-index: 9999;
    display: flex;
    justify-content: space-between;
    transform: translateX(100%);
    transition: all 0.5s ease-in;
}

.left-shade {
    width: 30%;
    height: 100%;
}

.right-choose {
    width: 70%;
    height: 100%;
    background-color: #fff;
    padding: 40rpx;
}

.picker-container {
    height: calc(100% - 200rpx);
    overflow-x: hidden;
    overflow-y: scroll;
    margin-top: 40rpx;
}

.picker-container::-webkit-scrollbar {
    display: none;
}

.picker-item {
    width: calc(100% - 8rpx);
    height: 50rpx;
    line-height: 50rpx;
    font-size: 24rpx;
    text-align: center;
    margin-top: 20rpx;
    border: 2rpx solid #eaeaea;
    border-radius: 8rpx;
}

.picker-item-choose {
    border: 2rpx solid rgb(110, 216, 84);
}

.picker-item:nth-of-type(1) {
    margin: 0;
}

.button-container {
    width: 100%;
    height: 80rpx;
    display: flex;
    justify-content: space-between;
    font-size: 24rpx;
    text-align: center;
    border-bottom: 2rpx solid #eaeaea;
}

.cancal {
    width: 100rpx;
    height: 40rpx;
    line-height: 40rpx;
    border: 2rpx solid #ddd;
    border-radius: 8rpx;
}

.sure {
    width: 100rpx;
    height: 40rpx;
    line-height: 40rpx;
    border: 2rpx solid rgb(132, 235, 132);
    border-radius: 8rpx;
}

</style>
